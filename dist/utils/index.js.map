{"version":3,"file":"index.js","sourceRoot":"/","sources":["utils/index.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment-timezone'\r\nimport { Location } from '../index';\r\nimport { Page } from 'puppeteer';\r\nimport countries from 'i18n-iso-countries';\r\nimport cities from 'all-the-cities';\r\n\r\nexport const getIsCountry = (text: string): boolean => {\r\n  const countriesList = Object.values(countries.getNames('en'));\r\n  const lowerCaseText = text.toLowerCase();\r\n\r\n  // Some custom text that we assume is also a country (lower cased)\r\n  // But is not detected correctly by the iso-countries module\r\n  if (['united states', 'the netherlands'].includes(lowerCaseText)) {\r\n    return true;\r\n  }\r\n\r\n  return !!countriesList.find(country => country.toLowerCase() === lowerCaseText);\r\n}\r\n\r\nexport const getIsCity = (text: string): boolean => {\r\n  const lowerCaseText = text.toLowerCase();\r\n\r\n  if (['new york'].includes(lowerCaseText)) {\r\n    return true;\r\n  }\r\n\r\n  return !!cities.find(city => city.name.toLowerCase() === lowerCaseText)\r\n}\r\n\r\nexport const formatDate = (date: moment.MomentInput | string): string => {\r\n  if (date === 'Present') {\r\n    return moment().format()\r\n  }\r\n\r\n  return moment(date, 'MMMY').format()\r\n}\r\n\r\nexport const getDurationInDays = (formattedStartDate: string, formattedEndDate: Date | string): number | null => {\r\n  if (!formattedStartDate || !formattedEndDate) return null\r\n  // +1 to include the start date\r\n  return moment(formattedEndDate).diff(moment(formattedStartDate), 'days') + 1\r\n}\r\n\r\nexport const getLocationFromText = (text: string): Location | null => {\r\n  // Text is something like: Amsterdam Oud-West, North Holland Province, Netherlands\r\n\r\n  if (!text) return null\r\n\r\n  const cleanText = text.replace(' Area', '').trim();\r\n  const parts = cleanText.split(', ');\r\n\r\n  let city: null | string = null\r\n  let province: null | string = null\r\n  let country: null | string = null\r\n\r\n  // If there are 3 parts, we can be sure of the order of each part\r\n  // So that must be a: city, province/state and country\r\n  if (parts.length === 3) {\r\n    city = parts[0]\r\n    province = parts[1]\r\n    country = parts[2]\r\n\r\n    return {\r\n      city,\r\n      province,\r\n      country\r\n    }\r\n  }\r\n\r\n  // If we only have 2 parts, we don't know exactly what each part is;\r\n  // it could still be: city, province/state or a country\r\n  // For example: Sacramento, California Area\r\n  if (parts.length === 2) {\r\n    // 2 possible scenario's are most likely. We strictly check for the following:\r\n    // first: city + country\r\n    // second: city + province/state\r\n\r\n    if (getIsCity(parts[0]) && getIsCountry(parts[1])) {\r\n      return {\r\n        city: parts[0],\r\n        province,\r\n        country: parts[1]\r\n      }\r\n    }\r\n\r\n    // If the second part is NOT a country, it's probably a province/state\r\n    if (getIsCity(parts[0]) && !getIsCountry(parts[1])) {\r\n      return {\r\n        city: parts[0],\r\n        province: parts[1],\r\n        country\r\n      }\r\n    }\r\n\r\n    return {\r\n      city,\r\n      province: parts[0],\r\n      country: parts[1]\r\n    }\r\n  }\r\n\r\n  // If we only have one part we'll end up here\r\n\r\n  // Just find out if it's one of: city, province/state or country\r\n  if (getIsCountry(parts[0])) {\r\n    return {\r\n      city,\r\n      province,\r\n      country: parts[0]\r\n    }\r\n  } \r\n  \r\n  if (getIsCity(parts[0])) {\r\n    return {\r\n      city: parts[0],\r\n      province,\r\n      country\r\n    }\r\n  }\r\n\r\n  // Else, it must be a province/state. We just don't know and assume it is.\r\n  return {\r\n    city,\r\n    province: parts[0],\r\n    country\r\n  }\r\n}\r\n\r\nexport const getCleanText = (text: string | null) => {\r\n  const regexRemoveMultipleSpaces = / +/g\r\n  const regexRemoveLineBreaks = /(\\r\\n\\t|\\n|\\r\\t)/gm\r\n\r\n  if (!text) return null\r\n\r\n  const cleanText = text\r\n    .replace(regexRemoveLineBreaks, '')\r\n    .replace(regexRemoveMultipleSpaces, ' ')\r\n    .replace('...', '')\r\n    .replace('See more', '')\r\n    .replace('See less', '')\r\n    .trim()\r\n\r\n  return cleanText\r\n}\r\n\r\nexport const statusLog = (section: string, message: string, scraperSessionId?: string | number) => {\r\n  const sessionPart = (scraperSessionId) ? ` (${scraperSessionId})` : ''\r\n  const messagePart = (message) ? `: ${message}` : null\r\n  return console.log(`Scraper (${section})${sessionPart}${messagePart}`)\r\n}\r\n\r\nexport const autoScroll = async (page: Page) => {\r\n  await page.evaluate(async () => {\r\n    await new Promise((resolve, reject) => {\r\n      var totalHeight = 0;\r\n      var distance = 500;\r\n      var timer = setInterval(() => {\r\n        var scrollHeight = document.body.scrollHeight;\r\n        window.scrollBy(0, distance);\r\n        totalHeight += distance;\r\n\r\n        if (totalHeight >= scrollHeight) {\r\n          clearInterval(timer);\r\n          resolve();\r\n        }\r\n      }, 100);\r\n    });\r\n  });\r\n}\r\n\r\nexport const getHostname = (url: string) => {\r\n  return new URL(url).hostname;\r\n};\r\n"]}